import random

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.utils.markdown import hlink, hcode

from data import config
from filters import Allowed
from keyboards.inline.buying import buy_keyboard
from loader import dp, db, com, op
from utils.misc.qiwi import Payment, NoPaymentFound, NotEnoughMoney

@dp.message_handler(CommandStart,Allowed())
async def begin(message: types.Message, state: FSMContext):
    yo = message.get_args()
    print(yo)
    try:
        if len(yo) == 5:
            item_id = int(yo)
            product = await com.one_item(id=item_id)
            text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {product['name']}! –•–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä"
            photo = product['photo']
            await message.answer_photo(photo=photo, caption=text, reply_markup=buy_keyboard(item_id=item_id))
            await state.update_data(id=item_id)
        else:
            one = await db.select_user(id=message.from_user.id)
            for param in one:
                balance = one['balance']
            bot_user = await dp.bot.get_me()
            deep_link = f"http://t.me/{bot_user.username}?start={message.from_user.id}"
            await message.answer(f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}! \n'
                             f'–¢–≤–æ–π –ë–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç : {balance} –†—É–±–ª–µ–π \n'
                             f'–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ —Å –ø–æ–º–æ—â—å—é —Å—Å—ã–ª–∫–∏ –∏ –ø–æ–ª—É—á–∏ —Å–∫–∏–¥–∫—É 10$ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∫—É–ø–∫—É:\n'
                             f'{deep_link}',
                             reply_markup=InlineKeyboardMarkup(
                                 inline_keyboard=[
                                     [
                                         InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–µ',
                                                              switch_inline_query_current_chat='')
                                     ]
                                 ]
                             ))
    except:
        pass


@dp.message_handler(CommandStart)
async def bot_start(message: types.Message, state: FSMContext):
    yo=message.get_args()
    try:
        id = message.from_user.id
        referal = int(yo)
        try:
            # config.allowed_user.append(id)
            await db.add_user(id=id,name=message.from_user.full_name,
                                  balance=0, referal=referal)

            friend = await db.select_user(id=referal)
            summa = int(friend['balance'])
            new = summa + 760
            await db.update_balance(balance=new, id=referal)
        except:
            pass
        await message.answer('–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö \n'
                                     '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ \n'
                                     '\n'
                                     '/start')
        await state.finish()


    except:
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name}! \n'
                         f'–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º –∏–ª–∏ –∫–æ–¥—É \n'
                         f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ :')
        await state.set_state('code')




@dp.message_handler(state='code')
async def invite(message: types.Message, state: FSMContext):
    message.text = message.text
    yo = message.get_args()
    if len(yo)==9:
        id = message.from_user.id
        referal = int(yo)
        await db.add_user(id=id, name=message.from_user.full_name,
                          balance=0, referal=referal)
        friend = await db.select_user(id=referal)
        summa = int(friend['balance'])
        new = summa + 760
        await db.update_balance(balance=new, id=referal)
        await message.answer('–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö \n'
                             '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ \n'
                             '\n'
                             '/start')
        await state.finish()
    if len(yo) =='':
        try:
            referal = int(message.text)
            search = await db.one_user(id=referal)
            await db.add_user(id=message.from_user.id,name=message.from_user.full_name, balance=0, referal=referal)
            friend = await db.one_user(id=referal)
            summa = int(friend['balance'])
            new = summa + 760
            await db.update_balance(balance=new, id=referal)
            await message.answer('–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ : \n'
                                 '/start')
            await state.finish()
        except ValueError:
            await message.answer('–í—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
            await state.finish()


@dp.callback_query_handler(text_contains="buy")
async def pre_buy(call:CallbackQuery,state: FSMContext):
    id=await db.select_user(id=call.from_user.id)
    for param in id:
        balance=int(id['balance'])
    await state.update_data(balance=balance)
    item_id = int(call.data.split(":")[-1])
    await state.update_data(item_id=item_id)
    if balance==0:
        await call.answer(cache_time=5)
        await call.message.answer('–£ –≤–∞—Å –Ω–µ—Ç –±–æ–Ω—É—Å–Ω—ã—Ö —Ä—É–±–ª–µ–π',reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫—É', callback_data='end')
                ]
            ]
        ))
        await state.set_state('choice')
    else:
        await call.answer(cache_time=5)
        await call.message.answer(f'–£ –≤–∞—Å –µ—Å—Ç—å {balance} –±–æ–Ω—É—Å–Ω—ã—Ö —Ä—É–±–ª–µ–π. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö'
                                  ,reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å',callback_data='use')
                    ],
                    [
                        InlineKeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫—É',callback_data="end")
                    ]
                ]
            ))
        await state.set_state('choice')

@dp.callback_query_handler(text_contains='use',state='choice')
async def bonus(call: CallbackQuery,state: FSMContext):
    await call.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –±–æ–Ω—É—Å–Ω—ã—Ö —Ä—É–±–ª–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å')
    await call.message.edit_reply_markup(reply_markup=None)
    await state.set_state('bonus')


@dp.message_handler(state='bonus')
async def konv(message: types.Message, state: FSMContext):
    sum=message.text
    try:
        sum=int(sum)
        data=await state.get_data()
        balance=data.get('balance')
        item_id=int(data.get('item_id'))
        item= await com.one_item(id=item_id)

        if sum> balance:
            await message.answer('–£ –Ω–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∫–∏–¥–æ—á–Ω—ã—Ö —Ä—É–±–ª–µ–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–º–µ–Ω—å—à–µ')
            return
        if sum<=balance:
            if sum == item['price']:
                sum=sum-1
            new_balance=balance-sum
            await message.answer('–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∏–º –ø–æ–∫—É–ø–∫—É',reply_markup=
                                     InlineKeyboardMarkup(
                                         inline_keyboard=[
                                             [
                                                 InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',callback_data='end')
                                             ]
                                         ]
                                     ))
            await db.update_balance(balance=new_balance,id=message.from_user.id)
            await state.update_data(bonus=sum)
            await state.set_state('choice')
    except ValueError:
            await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å',reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –±–æ–Ω—É—Å–æ–≤',callback_data='end')
                ],
                [
                    InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å',callback_data='cancel')
                ]
            ]))
            return



@dp.callback_query_handler(text="end", state='choice')
async def pre_finish(call:CallbackQuery,state: FSMContext):
    data = await state.get_data()
    item_id = data.get('item_id')
    item = await com.one_item(id=item_id)
    try:
        price = int(item['price'])
    except TypeError:
        await call.message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üòû \n", reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text='–í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä', switch_inline_query_current_chat='')
                    ]
                ]
            ))
        await state.finish()
    except:
        pass
    try:
        bonus = int(data.get('bonus'))
    except:
        pass
    try:
        price = price - bonus
    except:
        pass
    amount = price

    payment = Payment(amount=amount)
    payment.create()
    await state.update_data(payment=payment)
    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.answer(text='–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥',
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="–ö—É–ø–∏—Ç—å",
                                url=payment.invoice
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text='–û–ø–ª–∞—á–µ–Ω–æ',
                                callback_data='paid'
                            ),
                            InlineKeyboardButton(
                                text="–û—Ç–º–µ–Ω–∞",
                                callback_data="cancel")
                        ],
                    ]))



@dp.callback_query_handler(text='cancel',state='choice')
async def exp(call:CallbackQuery,state: FSMContext):
    try:
        data=await state.get_data()
        balance=data.get('balance')
        await db.update_balance(balance=balance,id=call.from_user.id)
    except:
        pass

    await call.message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–∫—É–ø–∫—É \n'
                              '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã',
                              reply_markup=InlineKeyboardMarkup(
                                  inline_keyboard=[
                                      [
                                          InlineKeyboardButton(text='–í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã',switch_inline_query_current_chat="")
                                      ]
                                  ]
                              ))
    await state.finish()




@dp.callback_query_handler(text="paid", state='choice')
async def approve_payment(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    payment: Payment = data.get("payment")
    try:
        payment.check_payment()
    except NoPaymentFound:
        await call.message.answer("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text='–ü–æ–≤—Ç–æ—Ä–∏—Ç—å',callback_data='paid')
                ]
            ]
        ))
        return
    except NotEnoughMoney:
        await call.message.answer("–û–ø–ª–∞—á–µ–Ω–Ω–∞—è —Å—É–º–∞ –º–µ–Ω—å—à–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π.",reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text='–ü–æ–≤—Ç–æ—Ä–∏—Ç—å',callback_data='paid')
                ]
            ]
        ))
        return

    else:
        item_id = int(data.get('id'))
        id_zakaz=random.randrange(100000)
        await op.add_zakaz(id_zakaz=id_zakaz,id_user=call.from_user.id,
                           name_user=call.from_user.first_name,id_item=item_id,status='created')
        await call.message.answer("–£—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ \n"
                                  f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {id_zakaz}")
    await call.message.edit_reply_markup()
    await state.finish()



